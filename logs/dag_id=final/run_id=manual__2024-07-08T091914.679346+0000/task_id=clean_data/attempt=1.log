[2024-07-08T09:22:18.097+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-07-08T09:22:18.141+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: Final.clean_data manual__2024-07-08T09:19:14.679346+00:00 [queued]>
[2024-07-08T09:22:18.157+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: Final.clean_data manual__2024-07-08T09:19:14.679346+00:00 [queued]>
[2024-07-08T09:22:18.158+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 2
[2024-07-08T09:22:18.190+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): clean_data> on 2024-07-08 09:19:14.679346+00:00
[2024-07-08T09:22:18.203+0000] {warnings.py:110} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=88) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-07-08T09:22:18.207+0000] {standard_task_runner.py:63} INFO - Started process 90 to run task
[2024-07-08T09:22:18.206+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'Final', 'clean_data', 'manual__2024-07-08T09:19:14.679346+00:00', '--job-id', '20', '--raw', '--subdir', 'DAGS_FOLDER/dag_test.py', '--cfg-path', '/tmp/tmppyimque9']
[2024-07-08T09:22:18.209+0000] {standard_task_runner.py:91} INFO - Job 20: Subtask clean_data
[2024-07-08T09:22:18.334+0000] {task_command.py:426} INFO - Running <TaskInstance: Final.clean_data manual__2024-07-08T09:19:14.679346+00:00 [running]> on host 442478dc4f73
[2024-07-08T09:22:18.546+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_EMAIL='ha20040204@gmail.com' AIRFLOW_CTX_DAG_OWNER='HA' AIRFLOW_CTX_DAG_ID='Final' AIRFLOW_CTX_TASK_ID='clean_data' AIRFLOW_CTX_EXECUTION_DATE='2024-07-08T09:19:14.679346+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-07-08T09:19:14.679346+00:00'
[2024-07-08T09:22:18.549+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-07-08T09:22:18.631+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:22:18.635+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:22:25.108+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:22:25.109+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:22:28.220+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:22:28.221+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:22:30.200+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:22:30.202+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:22:34.339+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:22:34.341+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:22:36.315+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:22:36.317+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:22:45.365+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:22:45.366+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:22:49.858+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:22:49.860+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:22:56.521+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:22:56.523+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:23:03.810+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:23:03.812+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:23:05.193+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:23:05.194+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:23:05.859+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:23:05.861+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:23:09.319+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:23:09.321+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:23:10.637+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-08T09:23:10.638+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-08T09:23:11.233+0000] {logging_mixin.py:188} INFO - Successfully.
[2024-07-08T09:23:11.235+0000] {python.py:237} INFO - Done. Returned value was: True
[2024-07-08T09:23:11.238+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-07-08T09:23:11.271+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=Final, task_id=clean_data, run_id=manual__2024-07-08T09:19:14.679346+00:00, execution_date=20240708T091914, start_date=20240708T092218, end_date=20240708T092311
[2024-07-08T09:23:11.323+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2024-07-08T09:23:11.365+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-07-08T09:23:11.368+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
