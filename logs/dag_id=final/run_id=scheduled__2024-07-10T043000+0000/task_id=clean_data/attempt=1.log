[2024-07-10T04:31:33.883+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-07-10T04:31:34.008+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: Final.clean_data scheduled__2024-07-10T04:30:00+00:00 [queued]>
[2024-07-10T04:31:34.045+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: Final.clean_data scheduled__2024-07-10T04:30:00+00:00 [queued]>
[2024-07-10T04:31:34.047+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 2
[2024-07-10T04:31:34.099+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): clean_data> on 2024-07-10 04:30:00+00:00
[2024-07-10T04:31:34.113+0000] {warnings.py:110} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=194) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-07-10T04:31:34.121+0000] {standard_task_runner.py:63} INFO - Started process 203 to run task
[2024-07-10T04:31:34.122+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'Final', 'clean_data', 'scheduled__2024-07-10T04:30:00+00:00', '--job-id', '45', '--raw', '--subdir', 'DAGS_FOLDER/dag_test.py', '--cfg-path', '/tmp/tmpmnd6nnys']
[2024-07-10T04:31:34.125+0000] {standard_task_runner.py:91} INFO - Job 45: Subtask clean_data
[2024-07-10T04:31:34.264+0000] {task_command.py:426} INFO - Running <TaskInstance: Final.clean_data scheduled__2024-07-10T04:30:00+00:00 [running]> on host dd74537ce0b1
[2024-07-10T04:31:34.515+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_EMAIL='ha20040204@gmail.com' AIRFLOW_CTX_DAG_OWNER='HA' AIRFLOW_CTX_DAG_ID='Final' AIRFLOW_CTX_TASK_ID='clean_data' AIRFLOW_CTX_EXECUTION_DATE='2024-07-10T04:30:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-07-10T04:30:00+00:00'
[2024-07-10T04:31:34.519+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-07-10T04:31:34.577+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:34.579+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:42.547+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:42.549+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:49.611+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:49.613+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:56.110+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:56.112+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:32:00.729+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:32:00.737+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:32:02.463+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:32:02.464+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

