[2024-07-10T04:30:41.213+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-07-10T04:30:41.270+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: Final.clean_data scheduled__2024-07-10T04:29:00+00:00 [queued]>
[2024-07-10T04:30:41.298+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: Final.clean_data scheduled__2024-07-10T04:29:00+00:00 [queued]>
[2024-07-10T04:30:41.303+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 2
[2024-07-10T04:30:41.351+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): clean_data> on 2024-07-10 04:29:00+00:00
[2024-07-10T04:30:41.361+0000] {warnings.py:110} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=152) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-07-10T04:30:41.364+0000] {standard_task_runner.py:63} INFO - Started process 154 to run task
[2024-07-10T04:30:41.365+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'Final', 'clean_data', 'scheduled__2024-07-10T04:29:00+00:00', '--job-id', '39', '--raw', '--subdir', 'DAGS_FOLDER/dag_test.py', '--cfg-path', '/tmp/tmpd4q7rt8g']
[2024-07-10T04:30:41.368+0000] {standard_task_runner.py:91} INFO - Job 39: Subtask clean_data
[2024-07-10T04:30:41.492+0000] {task_command.py:426} INFO - Running <TaskInstance: Final.clean_data scheduled__2024-07-10T04:29:00+00:00 [running]> on host dd74537ce0b1
[2024-07-10T04:30:41.746+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_EMAIL='ha20040204@gmail.com' AIRFLOW_CTX_DAG_OWNER='HA' AIRFLOW_CTX_DAG_ID='Final' AIRFLOW_CTX_TASK_ID='clean_data' AIRFLOW_CTX_EXECUTION_DATE='2024-07-10T04:29:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-07-10T04:29:00+00:00'
[2024-07-10T04:30:41.752+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-07-10T04:30:41.885+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:30:41.888+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:30:50.463+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:30:50.465+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:00.245+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:00.247+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:05.958+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:05.960+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:13.626+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:13.627+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:16.155+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:16.159+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:24.544+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:24.550+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:30.231+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:30.238+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:40.861+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:40.863+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:53.153+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:53.158+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:55.992+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:55.993+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:57.078+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:57.088+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:31:59.564+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:31:59.565+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:32:00.791+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:39: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls.append(round(data.iloc[i][4] - data.iloc[i + 1][4], 2))

[2024-07-10T04:32:00.793+0000] {warnings.py:110} WARNING - /opt/***/dags/dag_test.py:40: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  ls_rate.append(str(round(ls[i] / data.iloc[i + 1][4] * 100, 2)) + '%')

[2024-07-10T04:32:01.571+0000] {logging_mixin.py:188} INFO - Successfully.
[2024-07-10T04:32:01.572+0000] {python.py:237} INFO - Done. Returned value was: True
[2024-07-10T04:32:01.576+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-07-10T04:32:01.621+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=Final, task_id=clean_data, run_id=scheduled__2024-07-10T04:29:00+00:00, execution_date=20240710T042900, start_date=20240710T043041, end_date=20240710T043201
[2024-07-10T04:32:01.674+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2024-07-10T04:32:01.715+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-07-10T04:32:01.719+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
